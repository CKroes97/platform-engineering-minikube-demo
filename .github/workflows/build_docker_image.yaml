name: Build docker image

permissions:
  contents: read

on:
  workflow_dispatch:
  push:
    paths:
      - 'generated_dockerfiles/**'
      - '.github/workflows/build_docker_image.yaml'
      - 'workflow_scripts/build_docker_image/**'
  pull_request:

jobs: 
  build-image:
    runs-on: self-hosted
    steps:
      - name: force clean Repository
        run: sudo rm -rf ${{ github.workspace }}/terraform

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install requirements
        run: pip install -r workflow_scripts/build_docker_image/requirements.txt

      - name: Login to docker to generate auth files
        run: |
          echo $DOCKER__REGISTRY_PASSWORD | \
          sudo docker login --username $DOCKER_REGISTRY_USERNAME \
           --password-stdin  \
           "localhost:30080"
        env:
          DOCKER_REGISTRY_USERNAME: ${{ secrets.REGISTRY_USER }}
          DOCKER__REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Run Dockerfile build script
        run: | 
          python workflow_scripts/build_docker_image/build_docker_images.py \
           --dockerfiles-dir "generated_dockerfiles" \
           --docker-registry "localhost:30080"
        env:
          DOCKER_REGISTRY_USERNAME: ${{ secrets.REGISTRY_USER }}
          DOCKER__REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Create request for deployment
        run: |
          python workflow_scripts/build_docker_image/generate_requests.py \
            --env dev \
            --template-path templates/runtime-requests.yaml \
            --output-dir generated_python_webservices_requests

      - name: Create PR
        run: | 
          gh pr create --base ${{ github.ref_name }} --head ${{ env.branch_name }} \
           --title "Generate Dockerfiles" --body "Automated update"
        env:
         GH_TOKEN: ${{ github.token }}
        if: ${{ steps.commit_build.outcome == 'success' }}

      - name: Merge PR if not redundant
        run: |
         python workflow_scripts/shared/check_if_pr_redundant.py \
         --current-branch "${{ env.branch_name}}" \
         --base-branch "${{ github.ref_name }}" \
         --repository "${{ github.repository }}"
        env:
         GITHUB_TOKEN: ${{ github.token }}
        if: ${{ steps.commit_build.outcome == 'success' }}